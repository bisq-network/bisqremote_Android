apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'io.gitlab.arturbosch.detekt'

repositories {
    google()
    mavenCentral()
}

// This is primarily to be able to run unit and instrumented tests in GitHub workflows,
// since google-services.json is unavailable and will cause the GoogleServices task to fail
if (!project.file('google-services.json').exists()) {
    android.applicationVariants.configureEach { variant ->
        def googleTask = tasks.named("process${variant.name.capitalize()}GoogleServices")
        googleTask.enabled = false
    }
}

Properties props = new Properties()
props.load(new FileInputStream("$project.rootDir/version.properties"))
props.each { prop ->
    project.ext.set(prop.key, prop.value)
}

def getVersionCode = { ->
    int major = ext.majorVersion as Integer
    int minor = ext.minorVersion as Integer
    int patch = ext.patchVersion as Integer

    return major * 10000 + minor * 100 + patch
}

def getVersionName = { ->
    if (ext.buildNumber) {
        return "${ext.majorVersion}.${ext.minorVersion}.${ext.patchVersion}.${ext.buildNumber}"
    }

    return "${ext.majorVersion}.${ext.minorVersion}.${ext.patchVersion}"
}

android {
    namespace 'bisq.android'
    compileSdk 34

    defaultConfig {
        applicationId "com.joachimneumann.bisq"
        versionCode getVersionCode()
        versionName getVersionName()
        minSdkVersion 23
        targetSdkVersion 34
        multiDexEnabled true
        setProperty("archivesBaseName", "bisq")

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    testOptions {
        animationsDisabled = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        packagingOptions {
            jniLibs {
                useLegacyPackaging true
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all {
            variant ->
                variant.outputs.each {
                    output ->
                        def name = "bisq-${variant.name}.apk"
                        output.outputFileName = name
                }
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
}

dependencies {
    implementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:1.20.0")

    implementation "androidx.core:core-ktx:1.12.0"

    implementation 'androidx.preference:preference-ktx:1.2.1'

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.media:media:1.7.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'

    implementation 'com.google.android.material:material:1.11.0'

    implementation 'com.google.zxing:core:3.4.1'

    implementation platform('com.google.firebase:firebase-bom:32.6.0')
    implementation 'com.google.firebase:firebase-analytics-ktx:21.5.0'
    implementation 'com.google.firebase:firebase-messaging:23.4.0'

    implementation 'com.google.code.gson:gson:2.10'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1'

    implementation 'androidx.room:room-ktx:2.6.1'
    implementation 'androidx.room:room-runtime:2.6.1'
    annotationProcessor 'androidx.room:room-compiler:2.6.1'
    kapt 'androidx.room:room-compiler:2.6.1'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.2'
    implementation "androidx.lifecycle:lifecycle-common-java8:2.6.2"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation "androidx.multidex:multidex:2.0.1"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'io.mockk:mockk:1.12.3'
    testImplementation 'org.powermock:powermock:1.6.5'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.2'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.2'
    testImplementation(project(":testCommon"))

    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation "androidx.test:core-ktx:1.5.0"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.1'
    androidTestImplementation 'org.awaitility:awaitility-kotlin:4.2.0'
    androidTestImplementation 'io.mockk:mockk-android:1.12.3'
    androidTestImplementation(project(":testCommon")) {
        exclude group: "io.mockk", module: "mockk"
    }
    androidTestImplementation 'org.objenesis:objenesis:3.3'

    androidTestUtil 'androidx.test:orchestrator:1.4.2'
}
