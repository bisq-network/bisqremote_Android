apply plugin: 'com.android.application'
apply plugin: 'com.google.devtools.ksp'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'kotlin-android'
apply plugin: 'org.jlleitschuh.gradle.ktlint'

repositories {
    google()
    mavenCentral()
}

Properties props = new Properties()
props.load(new FileInputStream("$project.rootDir/version.properties"))
props.each { prop ->
    project.ext.set(prop.key, prop.value)
}

def getVersionCode = { ->
    int major = ext.majorVersion as Integer
    int minor = ext.minorVersion as Integer
    int patch = ext.patchVersion as Integer

    return major * 10000 + minor * 100 + patch
}

def getVersionName = { ->
    if (ext.buildNumber) {
        return "${ext.majorVersion}.${ext.minorVersion}.${ext.patchVersion}.${ext.buildNumber}"
    }

    return "${ext.majorVersion}.${ext.minorVersion}.${ext.patchVersion}"
}

android {
    namespace 'bisq.android'
    compileSdk 34

    defaultConfig {
        applicationId "com.joachimneumann.bisq"
        versionCode getVersionCode()
        versionName getVersionName()
        minSdkVersion 26
        targetSdkVersion 34
        multiDexEnabled true
        setProperty("archivesBaseName", "bisq")

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    testOptions {
        animationsDisabled = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        packagingOptions {
            jniLibs {
                useLegacyPackaging true
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            output.outputFileName = "bisq-${variant.name}.apk"
        }

        // Must disable the GoogleServices task when running unit and instrumented tests in GitHub
        // workflows, since google-services.json is unavailable and will cause it to fail.
        if (!project.file('google-services.json').exists()) {
            tasks.configureEach { Task task ->
                if (task.name.matches("process${variant.name.capitalize()}GoogleServices")) {
                    task.enabled = false
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    packagingOptions {
        resources.excludes.add("META-INF/*")
    }
}

dependencies {
    detektPlugins('io.gitlab.arturbosch.detekt:detekt-formatting:1.23.5')

    implementation 'androidx.core:core-ktx:1.12.0'

    implementation 'androidx.preference:preference-ktx:1.2.1'

    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.media:media:1.7.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'

    implementation 'com.google.android.material:material:1.12.0'

    implementation 'com.google.zxing:core:3.5.3'

    implementation platform('com.google.firebase:firebase-bom:33.6.0')
    implementation 'com.google.firebase:firebase-analytics-ktx:22.1.2'
    implementation 'com.google.firebase:firebase-messaging:24.1.0'

    implementation 'com.google.code.gson:gson:2.10.1'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'

    implementation 'androidx.room:room-ktx:2.6.1'
    implementation 'androidx.room:room-runtime:2.6.1'
    annotationProcessor 'androidx.room:room-compiler:2.6.1'
    ksp 'androidx.room:room-compiler:2.6.1'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.8.7'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.8.7'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.7'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation 'androidx.multidex:multidex:2.0.1'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'io.mockk:mockk:1.13.9'
    testImplementation 'org.powermock:powermock:1.6.6'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
    testImplementation(project(':testCommon'))

    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.assertj:assertj-core:3.25.3'
    androidTestImplementation 'androidx.test:core-ktx:1.6.1'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.6.1'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    androidTestImplementation 'org.awaitility:awaitility-kotlin:4.2.0'
    androidTestImplementation 'io.mockk:mockk-android:1.13.9'
    androidTestImplementation(project(':testCommon')) {
        // Prevent conflict with mockk-android
        exclude group: 'io.mockk', module: 'mockk'
    }
    androidTestImplementation 'org.objenesis:objenesis:3.3'

    androidTestUtil 'androidx.test:orchestrator:1.5.1'
}

def androidTestsReportsDirectory() {
    return "$layout.buildDirectory/reports/androidTests/connected/debug"
}

tasks.register('embedScreenshotsIntoReport') {
    group = "reporting"
    doFirst {
        def failureScreenshotsDirectory =
            new File(androidTestsReportsDirectory(), "screenshots/failures")

        if (!failureScreenshotsDirectory.exists()) {
            return
        }

        println "Embedding failure screenshots into report from ${failureScreenshotsDirectory}"

        failureScreenshotsDirectory.eachFile { failedTestClassDirectory ->
            def failedTestClassName = failedTestClassDirectory.name

            failedTestClassDirectory.eachFile { failedTestFile ->
                def failedTestName = failedTestFile.name
                def failedTestNameWithoutExtension =
                    failedTestName.take(failedTestName.lastIndexOf('.'))
                def failedTestClassJunitReportFile =
                    new File(androidTestsReportsDirectory(), "${failedTestClassName}.html")

                if (!failedTestClassJunitReportFile.exists()) {
                    println "Could not find JUnit report file for test class " +
                        "'${failedTestClassJunitReportFile}'"
                    return
                }

                def failedTestJunitReportContent = failedTestClassJunitReportFile.text

                def patternToFind = "<h3 class=\"failures\">" +
                    "${failedTestNameWithoutExtension}</h3>"
                def patternToReplace = "${patternToFind} <img src=\"screenshots/failures/" +
                    "${failedTestClassName}/${failedTestName}\" width =\"360\" /><br />"

                failedTestJunitReportContent = failedTestJunitReportContent.replaceAll(
                    patternToFind, patternToReplace)

                failedTestClassJunitReportFile.write(failedTestJunitReportContent)
            }
        }
    }
}

static def deviceScreenshotsDir() {
    return "/storage/emulated/0/Pictures/bisq"
}

tasks.register('clearScreenshotsFromDevice', Exec) {
    group = "reporting"
    ignoreExitValue = true

    def adbExecutableProvider = project.provider { android.getAdbExecutable().absolutePath }
    def deviceScreenshotsDirProvider = project.provider { deviceScreenshotsDir() }

    doFirst {
        commandLine = [
            adbExecutableProvider.get(),
            'shell', 'rm', '-rf',
            deviceScreenshotsDirProvider.get()
        ]
    }
}

tasks.register('fetchScreenshotsFromDevice', Exec) {
    group = "reporting"
    ignoreExitValue = true

    def adbExecutableProvider = project.provider { android.getAdbExecutable().absolutePath }
    def deviceScreenshotsDirProvider = project.provider { "${deviceScreenshotsDir()}/." }
    def androidTestsReportsDirectoryProvider = project.provider { androidTestsReportsDirectory() }

    doFirst {
        commandLine = [
            adbExecutableProvider.get(),
            'pull',
            deviceScreenshotsDirProvider.get(),
            androidTestsReportsDirectoryProvider.get()
        ]
    }
}

tasks.configureEach { task ->
    if (task.name == 'connectedDebugAndroidTest') {
        task.doFirst { 'clearScreenshotsFromDevice' }
        task.finalizedBy { 'fetchScreenshotsFromDevice' }
        task.finalizedBy { 'clearScreenshotsFromDevice' }
        task.finalizedBy { 'embedScreenshotsIntoReport' }
    }
}
